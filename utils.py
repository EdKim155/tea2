import re
from config import TEA_PRODUCTS

def find_product_by_id(product_id):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ id"""
    for category, products in TEA_PRODUCTS.items():
        for product in products:
            if product['id'] == product_id:
                return product
    return None

def extract_product_id(callback_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data"""
    match = re.search(r'(?:product_|add_to_cart_|remove_|increase_|decrease_)(.+)', callback_data)
    if match:
        return match.group(1)
    return None

def extract_category_key(callback_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data"""
    match = re.search(r'category_(.+)', callback_data)
    if match:
        return match.group(1)
    return None

def format_cart_message(cart_items):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã"""
    if not cart_items:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    
    total = 0
    lines = ["<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n"]
    
    for i, item in enumerate(cart_items, 1):
        product = find_product_by_id(item['product_id'])
        if product:
            price = product['price']
            item_total = price * item['quantity']
            total += item_total
            
            lines.append(
                f"{i}. <b>{product['name']}</b> x {item['quantity']} = {item_total} ‚ÇΩ"
            )
    
    lines.append(f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ")
    
    return "\n".join(lines)

def format_product_details(product):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    if not product:
        return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    return f"""
<b>{product['name']}</b>

{product['description']}

<b>–¶–µ–Ω–∞:</b> {product['price']} ‚ÇΩ –∑–∞ 100 –≥
"""

def format_order_details(order, items_with_details):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    created_at = order.get('created_at', '')
    status = get_order_status_emoji(order.get('status', '')) + " " + get_status_description(order.get('status', ''))
    
    total = 0
    items_text = []
    
    for item in items_with_details:
        product = item.get('product', {})
        quantity = item.get('quantity', 0)
        price = product.get('price', 0)
        item_total = price * quantity
        total += item_total
        
        items_text.append(
            f"‚Ä¢ {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} x {quantity} = {item_total} ‚ÇΩ"
        )
    
    result = f"""
<b>üìã –ó–∞–∫–∞–∑ ‚Ññ{str(order.get('_id', ''))[-6:]}</b>

<b>–î–∞—Ç–∞:</b> {created_at.strftime('%d.%m.%Y %H:%M') if hasattr(created_at, 'strftime') else str(created_at)}
<b>–°—Ç–∞—Ç—É—Å:</b> {status}

<b>–¢–æ–≤–∞—Ä—ã:</b>
{''.join(items_text)}

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
{order.get('shipping_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}

<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>
{get_payment_method_description(order.get('payment_method', ''))}

<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ
"""
    return result

def get_order_status_emoji(status):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    statuses = {
        'new': 'üÜï',
        'processing': '‚è≥',
        'shipped': 'üöö',
        'delivered': '‚úÖ',
        'canceled': '‚ùå'
    }
    return statuses.get(status, '‚ùì')

def get_status_description(status):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    statuses = {
        'new': '–ù–æ–≤—ã–π',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'canceled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return statuses.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

def get_payment_method_description(method):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    methods = {
        'card': 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π',
        'cash': 'üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'
    }
    return methods.get(method, '–ù–µ —É–∫–∞–∑–∞–Ω') 