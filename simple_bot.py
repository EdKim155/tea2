from datetime import datetime, timedelta
from telegram import Update, ForceReply, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
STATE_MAIN = "main"
STATE_AWAITING_ADDRESS = "awaiting_address"
STATE_AWAITING_COMMENT = "awaiting_comment"
STATE_AWAITING_PROMO = "awaiting_promo"
STATE_AWAITING_NAME = "awaiting_name"

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_IDS = [5512345678, 328924878]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_PASSWORD = "admin123"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
ADMIN_STATE_MAIN = "admin_main"
ADMIN_STATE_ORDERS = "admin_orders"
ADMIN_STATE_PRODUCTS = "admin_products" 
ADMIN_STATE_LOYALTY = "admin_loyalty"
ADMIN_STATE_PROMO = "admin_promo"
ADMIN_STATE_STATS = "admin_stats"
ADMIN_STATE_AWAITING_PRODUCT_DATA = "admin_awaiting_product_data"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
LOYALTY = {}
LOYALTY_LEVELS = {
    "–ù–æ–≤–∏—á–æ–∫": {"min_spent": 0, "cashback_percent": 5},
    "–õ—é–±–∏—Ç–µ–ª—å": {"min_spent": 10000, "cashback_percent": 7},
    "–ó–Ω–∞—Ç–æ–∫": {"min_spent": 30000, "cashback_percent": 10},
    "–ú–∞—Å—Ç–µ—Ä": {"min_spent": 50000, "cashback_percent": 15}
}

# –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
REFERRAL_BONUS_POINTS = 100
REFERRAL_BONUS_PERCENT = 5

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
PROMO_CODES = {
    "WELCOME10": {"discount_percent": 10, "uses_left": 100, "min_order": 1000},
    "TEAFAN20": {"discount_percent": 20, "uses_left": 50, "min_order": 2000},
    "SUMMER25": {"discount_percent": 25, "uses_left": 30, "min_order": 3000}
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–∞—è
TEA_CATEGORIES = {
    "black": "–ß–µ—Ä–Ω—ã–π —á–∞–π",
    "green": "–ó–µ–ª–µ–Ω—ã–π —á–∞–π",
    "oolong": "–£–ª—É–Ω",
    "herbal": "–¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π",
    "mate": "–ú–∞—Ç–µ",
    "white": "–ë–µ–ª—ã–π —á–∞–π"
}

# –¢–æ–≤–∞—Ä—ã
TEA_PRODUCTS = {
    "black": [
        {"id": "b1", "name": "–ê—Å—Å–∞–º", "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–π—Å–∫–∏–π —á–µ—Ä–Ω—ã–π —á–∞–π —Å –ø—Ä—è–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º.", "price": 450},
        {"id": "b2", "name": "–≠—Ä–ª –ì—Ä–µ–π", "description": "–ß–µ—Ä–Ω—ã–π —á–∞–π —Å –∞—Ä–æ–º–∞—Ç–æ–º –±–µ—Ä–≥–∞–º–æ—Ç–∞.", "price": 500},
        {"id": "b3", "name": "–î–∞—Ä–¥–∂–∏–ª–∏–Ω–≥", "description": "–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π —á–µ—Ä–Ω—ã–π —á–∞–π –∏–∑ –ø—Ä–µ–¥–≥–æ—Ä–∏–π –ì–∏–º–∞–ª–∞–µ–≤.", "price": 600}
    ],
    "green": [
        {"id": "g1", "name": "–°–µ–Ω—á–∞", "description": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —è–ø–æ–Ω—Å–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π —Å –æ—Å–≤–µ–∂–∞—é—â–∏–º –≤–∫—É—Å–æ–º.", "price": 550},
        {"id": "g2", "name": "–ñ–∞—Å–º–∏–Ω–æ–≤—ã–π", "description": "–ó–µ–ª–µ–Ω—ã–π —á–∞–π —Å –∞—Ä–æ–º–∞—Ç–æ–º –∂–∞—Å–º–∏–Ω–∞.", "price": 500},
        {"id": "g3", "name": "–õ—É–Ω –¶–∑–∏–Ω", "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π '–ö–æ–ª–æ–¥–µ—Ü –¥—Ä–∞–∫–æ–Ω–∞'.", "price": 700}
    ],
    "oolong": [
        {"id": "o1", "name": "–¢–µ –ì—É–∞–Ω—å –ò–Ω—å", "description": "–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π —É–ª—É–Ω —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏.", "price": 800},
        {"id": "o2", "name": "–î–∞ –•—É–Ω –ü–∞–æ", "description": "–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π —É–ª—É–Ω —Å —É—Ç–µ—Å–æ–≤ –£–∏.", "price": 900}
    ],
    "herbal": [
        {"id": "h1", "name": "–†–æ–º–∞—à–∫–æ–≤—ã–π", "description": "–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π —Ç—Ä–∞–≤—è–Ω–æ–π —á–∞–π –∏–∑ —Ü–≤–µ—Ç–∫–æ–≤ —Ä–æ–º–∞—à–∫–∏.", "price": 400},
        {"id": "h2", "name": "–ú—è—Ç–Ω—ã–π", "description": "–û—Å–≤–µ–∂–∞—é—â–∏–π —á–∞–π –∏–∑ –ª–∏—Å—Ç—å–µ–≤ –º—è—Ç—ã.", "price": 350},
        {"id": "h3", "name": "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–±–æ—Ä", "description": "–Ø—Ä–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å—É—à–µ–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∏ —è–≥–æ–¥.", "price": 450}
    ],
    "mate": [
        {"id": "m1", "name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ", "description": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —é–∂–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –ø–∞–¥—É–±–∞.", "price": 550},
        {"id": "m2", "name": "–ú–∞—Ç–µ —Å –ª–∏–º–æ–Ω–æ–º", "description": "–ú–∞—Ç–µ —Å –∞—Ä–æ–º–∞—Ç–æ–º –ª–∏–º–æ–Ω–∞ –∏ –ª–µ–≥–∫–æ–π –∫–∏—Å–ª–∏–Ω–∫–æ–π.", "price": 600}
    ],
    "white": [
        {"id": "w1", "name": "–ë–∞–π –ú—É –î–∞–Ω—å", "description": "–ë–µ–ª—ã–π –ø–∏–æ–Ω - –Ω–µ–∂–Ω—ã–π —á–∞–π —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º.", "price": 800},
        {"id": "w2", "name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ –∏–≥–ª—ã", "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π —á–∞–π –∏–∑ –º–æ–ª–æ–¥—ã—Ö –ø–æ—á–µ–∫.", "price": 1200}
    ]
}

# –ó–∞–∫–∞–∑—ã
ORDERS = {}

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: {product_id: {'name': 'Product name', 'price': 100, 'quantity': 2}}}
CART = {}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: {user_id: {'last_active': datetime, 'session_expires': datetime}}
ADMIN_SESSIONS = {}

# –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (24 —á–∞—Å–∞)
ADMIN_SESSION_DURATION = 24 * 60 * 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üçµ –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è"), KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ")],
        [KeyboardButton("üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"), KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await update.message.reply_html(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if user_id in ADMIN_SESSIONS and datetime.now() < ADMIN_SESSIONS[user_id]['session_expires']:
        # –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        USER_STATES[user_id] = ADMIN_STATE_MAIN
        await show_admin_panel(update, context)
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    await update.message.reply_html(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=ForceReply(selective=True)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    USER_STATES[user_id] = "admin_password"

async def process_admin_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    password = update.message.text
    user_id = update.effective_user.id
    
    if password != ADMIN_PASSWORD:
        await update.message.reply_html(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."
        )
        USER_STATES[user_id] = STATE_MAIN
        return
    
    # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    now = datetime.now()
    ADMIN_SESSIONS[user_id] = {
        'last_active': now,
        'session_expires': now + timedelta(seconds=ADMIN_SESSION_DURATION)
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    USER_STATES[user_id] = ADMIN_STATE_MAIN
    await show_admin_panel(update, context)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞
def update_admin_activity(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id in ADMIN_SESSIONS:
        now = datetime.now()
        ADMIN_SESSIONS[user_id]['last_active'] = now
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 1 —á–∞—Å–∞
        if ADMIN_SESSIONS[user_id]['session_expires'] - now < timedelta(hours=1):
            ADMIN_SESSIONS[user_id]['session_expires'] = now + timedelta(seconds=ADMIN_SESSION_DURATION)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        return  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    update_admin_activity(user_id)
    
    state = USER_STATES.get(user_id, "")
    
    # –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞
    if text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞":
        USER_STATES[user_id] = STATE_MAIN
        await update.message.reply_html(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if state == ADMIN_STATE_MAIN:
        if text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏":
            USER_STATES[user_id] = ADMIN_STATE_ORDERS
            await show_admin_orders(update, context)
        
        elif text == "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏":
            USER_STATES[user_id] = ADMIN_STATE_PRODUCTS
            await show_admin_products(update, context)
        
        elif text == "üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
            USER_STATES[user_id] = ADMIN_STATE_LOYALTY
            await show_admin_loyalty(update, context)
        
        elif text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã":
            USER_STATES[user_id] = ADMIN_STATE_PROMO
            await show_admin_promo(update, context)
        
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            USER_STATES[user_id] = ADMIN_STATE_STATS
            await show_admin_stats(update, context)
        
        elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            await update_admin_data(update, context)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–ª–±—ç–∫–∏
    if user_id in ADMIN_IDS and data.startswith("admin_"):
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        update_admin_activity(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        if data.startswith("admin_confirm_"):
            order_id = data.replace("admin_confirm_", "")
            await admin_update_order_status(query, order_id, "processing")
            return
        
        elif data.startswith("admin_ship_"):
            order_id = data.replace("admin_ship_", "")
            await admin_update_order_status(query, order_id, "shipped")
            return
        
        elif data.startswith("admin_deliver_"):
            order_id = data.replace("admin_deliver_", "")
            await admin_update_order_status(query, order_id, "delivered")
            return
        
        elif data.startswith("admin_cancel_"):
            order_id = data.replace("admin_cancel_", "")
            await admin_update_order_status(query, order_id, "canceled")
            return
            
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–ª–±—ç–∫–æ–≤
        await handle_admin_callback(query, data)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
    if user_id in USER_STATES and USER_STATES[user_id].startswith("admin_"):
        await query.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –º–∞–≥–∞–∑–∏–Ω–∞.", show_alert=True)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        if data.startswith("category_"):
            category_id = data.replace("category_", "")
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await show_category_products(query, category_id)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
        elif data.startswith("product_"):
            product_id = data.replace("product_", "")
            await show_product_details(query, product_id)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        elif data.startswith("add_to_cart_"):
            product_id = data.replace("add_to_cart_", "")
            await add_to_cart(query, product_id)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        elif data == "profile":
            await show_profile(query)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        elif data == "cart":
            await show_cart(query)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        elif data == "promo_codes":
            await show_promo_codes(query)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        elif data == "referral_link":
            await get_referral_link(query)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif data == "main_menu":
            await query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
            return
            
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

async def admin_show_categories_callback(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ callback"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for key, name in TEA_CATEGORIES.items():
        buttons.append([InlineKeyboardButton(name, callback_data=f"admin_category_{key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    buttons.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_create_category")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_products")])
    
    await query.edit_message_text(
        """
<b>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:
""",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = [
        [KeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"), KeyboardButton("üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")],
        [KeyboardButton("üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"), KeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    message = await update.message.reply_html(
        """
<b>üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å TeaShopBot</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
‚Ä¢ üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üîô –í—ã–π—Ç–∏ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
""",
        reply_markup=reply_markup
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_html(
        """
<b>üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
""",
        reply_markup=get_admin_main_inline_keyboard()
    )

async def show_product_details(query, product_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    user_id = query.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    product = None
    category_id = None
    for cat_id, products in TEA_PRODUCTS.items():
        for p in products:
            if p["id"] == product_id:
                product = p
                category_id = cat_id
                break
        if product:
            break
    
    if not product:
        await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    name = product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    description = product.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    price = product.get("price", 0)
    
    text = f"""
<b>{name}</b>

{description}

<b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ –∑–∞ 100 –≥
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    buttons.append([InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"category_{category_id}")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    await query.answer()

async def get_referral_link(query):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot_username = "–≤–∞—à_–±–æ—Ç_—é–∑–µ—Ä–Ω–µ–π–º"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    ref_link = f"https://t.me/{bot_username}?start=ref{user_id}"
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    referrals_count = sum(1 for user_data in LOYALTY.values() if user_data.get('referred_by') == user_id)
    referral_points = sum(user_data.get('referral_bonus', 0) for user_data in LOYALTY.values() if user_data.get('referred_by') == user_id)
    
    await query.edit_message_text(
        f"""
<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –ø–æ–∫—É–ø–∫–∏!

<code>{ref_link}</code>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
‚Ä¢ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –±–∞–ª–ª–æ–≤: {referral_points}

–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{REFERRAL_BONUS_POINTS}</b> –±–∞–ª–ª–æ–≤, –∫–æ–≥–¥–∞ –¥—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.
–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{REFERRAL_BONUS_PERCENT}%</b> –æ—Ç —Å—É–º–º—ã –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –≤ –≤–∏–¥–µ –±–∞–ª–ª–æ–≤.
""",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")]
        ])
    )
    await query.answer()

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    user_id = update.effective_user.id
    name = update.effective_user.first_name
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[user_id] = STATE_MAIN
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if context.args and len(context.args) > 0:
        ref_code = context.args[0]
        if ref_code.startswith("ref"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                referrer_id = int(ref_code[3:])
                if referrer_id != user_id and user_id not in LOYALTY:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –±–æ–Ω—É—Å–æ–º
                    LOYALTY[user_id] = {
                        'points': REFERRAL_BONUS_POINTS,
                        'level': '–ù–æ–≤–∏—á–æ–∫',
                        'total_spent': 0,
                        'referred_by': referrer_id
                    }
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if referrer_id in LOYALTY:
                        LOYALTY[referrer_id]['points'] = LOYALTY[referrer_id].get('points', 0) + REFERRAL_BONUS_POINTS
            except:
                pass
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if user_id not in LOYALTY:
        LOYALTY[user_id] = {
            'points': 0,
            'level': '–ù–æ–≤–∏—á–æ–∫',
            'total_spent': 0
        }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_html(
        f"""
–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tea Shop Bot - –≤–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ —á–∞—è! üçµ

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —á–∞—è
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        """,
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
    await update.message.reply_html(
        """
<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Tea Shop Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/admin - –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üçµ –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–æ–≤–∞—Ä
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
5. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–µ 100 ‚ÇΩ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5 –±–∞–ª–ª–æ–≤
‚Ä¢ 1 –±–∞–ª–ª = 1 ‚ÇΩ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π

<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –∞–∫—Ü–∏—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã".
        """,
        reply_markup=get_main_menu_keyboard()
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def show_category_products(query, category_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = TEA_CATEGORIES.get(category_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    products = TEA_PRODUCTS.get(category_id, [])
    
    if not products:
        await query.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    text = f"<b>{category_name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    for product in products:
        buttons.append([InlineKeyboardButton(
            f"{product['name']} - {product['price']} ‚ÇΩ", 
            callback_data=f"product_{product['id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="main_menu")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def add_to_cart(query, product_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
    product = None
    for products in TEA_PRODUCTS.values():
        for p in products:
            if p["id"] == product_id:
                product = p
                break
        if product:
            break
    
    if not product:
        await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in CART:
        CART[user_id] = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if product_id in CART[user_id]:
        CART[user_id][product_id]["quantity"] += 1
    else:
        CART[user_id][product_id] = {
            "name": product["name"],
            "price": product["price"],
            "quantity": 1
        }
    
    await query.answer(f"–¢–æ–≤–∞—Ä {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

async def show_cart(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    
    if user_id not in CART or not CART[user_id]:
        await query.edit_message_text(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="main_menu")]
            ])
        )
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total = sum(item["price"] * item["quantity"] for item in CART[user_id].values())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for product_id, item in CART[user_id].items():
        text += f"‚Ä¢ {item['name']} - {item['price']} ‚ÇΩ x {item['quantity']} = {item['price'] * item['quantity']} ‚ÇΩ\n"
    
    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def show_profile(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    loyalty_data = LOYALTY.get(user_id, {"points": 0, "level": "–ù–æ–≤–∏—á–æ–∫", "total_spent": 0})
    points = loyalty_data.get("points", 0)
    level = loyalty_data.get("level", "–ù–æ–≤–∏—á–æ–∫")
    total_spent = loyalty_data.get("total_spent", 0)
    
    # –†–∞—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_info = LOYALTY_LEVELS.get(level, {"min_spent": 0})
    next_level = None
    spent_needed = 0
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    levels = ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–ó–Ω–∞—Ç–æ–∫", "–ú–∞—Å—Ç–µ—Ä"]
    current_index = levels.index(level)
    
    if current_index < len(levels) - 1:
        next_level = levels[current_index + 1]
        next_level_info = LOYALTY_LEVELS.get(next_level, {"min_spent": 0})
        spent_needed = next_level_info["min_spent"] - total_spent
    
    text = f"""
<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {level}
<b>–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {points}
<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {total_spent} ‚ÇΩ

"""
    
    if next_level:
        text += f"<b>–î–æ —É—Ä–æ–≤–Ω—è {next_level}:</b> {spent_needed} ‚ÇΩ\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±—ç–∫–µ
    cashback_percent = LOYALTY_LEVELS.get(level, {}).get("cashback_percent", 0)
    text += f"\n<b>–í–∞—à –∫–µ—à–±—ç–∫:</b> {cashback_percent}% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"
    
    buttons = [
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="referral_link")],
        [InlineKeyboardButton("üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def show_promo_codes(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = """
<b>üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</b>

‚Ä¢ <code>WELCOME10</code> ‚Äî —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç 1000 ‚ÇΩ
‚Ä¢ <code>TEAFAN20</code> ‚Äî —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç 2000 ‚ÇΩ
‚Ä¢ <code>SUMMER25</code> ‚Äî —Å–∫–∏–¥–∫–∞ 25% –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç 3000 ‚ÇΩ

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É.
"""
    
    buttons = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    buttons = [
        [InlineKeyboardButton("üçµ –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è", callback_data="catalog")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    return InlineKeyboardMarkup(buttons)

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_admin_main_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_orders")],
        [InlineKeyboardButton("üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
        [InlineKeyboardButton("üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data="admin_loyalty")],
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_orders_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_new")],
        [InlineKeyboardButton("‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data="admin_orders_processing")],
        [InlineKeyboardButton("üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="admin_orders_shipped")],
        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_orders_delivered")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_orders_canceled")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_products_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_loyalty_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    buttons = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", callback_data="admin_loyalty_settings")],
        [InlineKeyboardButton("üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_loyalty_top_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_promo_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_add_promo")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="admin_promo_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_stats_inline_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    buttons = [
        [InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_stats_today"), 
         InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_stats_week")],
        [InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="admin_stats_month"), 
         InlineKeyboardButton("üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="admin_stats_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    return InlineKeyboardMarkup(buttons)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_admin_callback(query, data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    if data == "admin_main":
        await query.edit_message_text(
            """
<b>üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å TeaShopBot</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
""",
            parse_mode='HTML',
            reply_markup=get_admin_main_inline_keyboard()
        )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
    elif data == "admin_orders":
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        new_orders = len([o for o in ORDERS.values() if o['status'] == 'new'])
        processing_orders = len([o for o in ORDERS.values() if o['status'] == 'processing'])
        shipped_orders = len([o for o in ORDERS.values() if o['status'] == 'shipped'])
        delivered_orders = len([o for o in ORDERS.values() if o['status'] == 'delivered'])
        canceled_orders = len([o for o in ORDERS.values() if o['status'] == 'canceled'])
        
        await query.edit_message_text(
            f"""
<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{new_orders}</b>
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{processing_orders}</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{shipped_orders}</b>
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{delivered_orders}</b>
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: <b>{canceled_orders}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:
""",
            parse_mode='HTML',
            reply_markup=get_admin_orders_inline_keyboard()
        )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
    elif data == "admin_products":
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        total_products = sum(len(products) for products in TEA_PRODUCTS.values())
        
        await query.edit_message_text(
            f"""
<b>üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>

–í –∫–∞—Ç–∞–ª–æ–≥–µ: <b>{total_products}</b> —Ç–æ–≤–∞—Ä–æ–≤ –≤ <b>{len(TEA_CATEGORIES)}</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
            parse_mode='HTML',
            reply_markup=get_admin_products_inline_keyboard()
        )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    elif data == "admin_loyalty":
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        total_users = len(LOYALTY)
        total_points = sum(user_data.get('points', 0) for user_data in LOYALTY.values())
        
        await query.edit_message_text(
            f"""
<b>üíØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: <b>{total_users}</b>
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: <b>{total_points}</b>
‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞: –æ—Ç <b>{LOYALTY_LEVELS['–ù–æ–≤–∏—á–æ–∫']['cashback_percent']}%</b> –¥–æ <b>{LOYALTY_LEVELS['–ú–∞—Å—Ç–µ—Ä']['cashback_percent']}%</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: <b>{REFERRAL_BONUS_POINTS}</b> –±–∞–ª–ª–æ–≤
‚Ä¢ –ö—ç—à–±—ç–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{REFERRAL_BONUS_PERCENT}%</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
            parse_mode='HTML',
            reply_markup=get_admin_loyalty_inline_keyboard()
        )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    elif data == "admin_promo":
        # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        active_promos = sum(1 for promo in PROMO_CODES.values() if promo['uses_left'] > 0)
        
        await query.edit_message_text(
            f"""
<b>üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{len(PROMO_CODES)}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{active_promos}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
            parse_mode='HTML',
            reply_markup=get_admin_promo_inline_keyboard()
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == "admin_stats":
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_orders = len(ORDERS)
        total_revenue = sum(order.get('total', 0) for order in ORDERS.values())
        avg_order = total_revenue / total_orders if total_orders > 0 else 0
        
        await query.edit_message_text(
            f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>

–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_order:.2f} ‚ÇΩ</b>
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(LOYALTY)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
""",
            parse_mode='HTML',
            reply_markup=get_admin_stats_inline_keyboard()
        )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    elif data.startswith("admin_order_"):
        order_id = data.replace("admin_order_", "")
        await admin_view_order_callback(query, order_id)
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    elif data.startswith("admin_stats_"):
        period = data.replace("admin_stats_", "")
        await show_sales_period_stats_callback(query, period)
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    elif data.startswith("admin_orders_"):
        status = data.replace("admin_orders_", "")
        await show_orders_by_status_callback(query, status)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    elif data == "admin_categories":
        await admin_show_categories_callback(query)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif data == "admin_create_category":
        await admin_create_category(query)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif data.startswith("admin_category_"):
        category_key = data.replace("admin_category_", "")
        await admin_select_product_category(query, category_key)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    elif data == "admin_add_product":
        await admin_add_product_callback(query)
    
    # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    elif data == "admin_skip_image":
        await skip_product_image(query, context=None)
    
    # –ü—Ä–æ—á–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    else:
        await query.answer("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in USER_STATES:
        state = USER_STATES[user_id]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if user_id in ADMIN_IDS:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id in ADMIN_SESSIONS:
                now = datetime.now()
                if now > ADMIN_SESSIONS[user_id]['session_expires']:
                    # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
                    USER_STATES[user_id] = STATE_MAIN
                    await update.message.reply_html(
                        "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /admin",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                update_admin_activity(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            if state == "admin_password":
                await process_admin_password(update, context)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if state.startswith("admin_"):
                if text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞":
                    USER_STATES[user_id] = STATE_MAIN
                    await update.message.reply_html(
                        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                elif text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
                    USER_STATES[user_id] = ADMIN_STATE_MAIN
                    await show_admin_panel(update, context)
                    return
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                if state == ADMIN_STATE_MAIN:
                    await handle_admin_text(update, context)
                    return
                elif state == ADMIN_STATE_ORDERS:
                    if text == "üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã":
                        await show_orders_by_status(update, context, "new")
                    elif text == "üöö –ó–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ":
                        await show_orders_by_status(update, context, "shipped")
                    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
                        await show_orders_by_status(update, context, "delivered")
                    elif text == "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
                        await show_orders_by_status(update, context, "canceled")
                    return
                elif state == ADMIN_STATE_PRODUCTS:
                    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
                        await admin_add_product(update, context)
                    elif text == "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
                        await admin_show_categories(update, context)
                    return
                elif state == ADMIN_STATE_LOYALTY:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é
                    pass
                elif state == ADMIN_STATE_STATS:
                    if text == "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è":
                        await show_sales_period_stats(update, context, "today")
                    elif text == "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é":
                        await show_sales_period_stats(update, context, "week")
                    elif text == "üìÖ –ó–∞ –º–µ—Å—è—Ü":
                        await show_sales_period_stats(update, context, "month")
                    elif text == "üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è":
                        await show_sales_period_stats(update, context, "all")
                    return
                elif state == ADMIN_STATE_AWAITING_PRODUCT_DATA:
                    await process_new_product_data(update, context)
                    return
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ admin-—Ä–µ–∂–∏–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await update.message.reply_html(
                    "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")], [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]], resize_keyboard=True)
                )
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if state == STATE_AWAITING_ADDRESS:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
            await process_address_input(update, context)
            return
        
        if state == STATE_AWAITING_COMMENT:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            await process_comment_input(update, context)
            return
        
        if state == STATE_AWAITING_PROMO:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await process_promo_code(update, context)
            return
            
        if state == STATE_AWAITING_NAME:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏
            await process_name_input(update, context)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
    if user_id in USER_STATES and USER_STATES[user_id].startswith("admin_"):
        await update.message.reply_html(
            "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")], [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]], resize_keyboard=True)
        )
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üçµ –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è":
            await show_catalog(update, context)
        elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            await show_user_cart(update, context)
        elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await show_user_profile(update, context)
        elif text == "‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ":
            await show_about(update, context)
        elif text == "üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
            await show_loyalty_info(update, context)
        elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
            await show_contacts(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_html(
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_html(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    import logging
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
    import os
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    TOKEN = os.environ.get("TELEGRAM_TOKEN", "7638208338:AAElrmQU861HX70ZQVRUY5gLUYHabK3y0qg")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling()

if __name__ == "__main__":
    main()

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–∞—è"""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    buttons = []
    for category_id, category_name in TEA_CATEGORIES.items():
        buttons.append([InlineKeyboardButton(category_name, callback_data=f"category_{category_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_html(
        "<b>üçµ –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

async def show_user_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    
    if user_id not in CART or not CART[user_id]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
        ])
        
        await update.message.reply_html(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            reply_markup=keyboard
        )
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total = sum(item["price"] * item["quantity"] for item in CART[user_id].values())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for product_id, item in CART[user_id].items():
        text += f"‚Ä¢ {item['name']} - {item['price']} ‚ÇΩ x {item['quantity']} = {item['price'] * item['quantity']} ‚ÇΩ\n"
    
    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")]
    ]
    
    await update.message.reply_html(
        text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    loyalty_data = LOYALTY.get(user_id, {"points": 0, "level": "–ù–æ–≤–∏—á–æ–∫", "total_spent": 0})
    points = loyalty_data.get("points", 0)
    level = loyalty_data.get("level", "–ù–æ–≤–∏—á–æ–∫")
    total_spent = loyalty_data.get("total_spent", 0)
    
    # –†–∞—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    next_level = None
    spent_needed = 0
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    levels = ["–ù–æ–≤–∏—á–æ–∫", "–õ—é–±–∏—Ç–µ–ª—å", "–ó–Ω–∞—Ç–æ–∫", "–ú–∞—Å—Ç–µ—Ä"]
    current_index = levels.index(level)
    
    if current_index < len(levels) - 1:
        next_level = levels[current_index + 1]
        next_level_info = LOYALTY_LEVELS.get(next_level, {"min_spent": 0})
        spent_needed = next_level_info["min_spent"] - total_spent
    
    text = f"""
<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {level}
<b>–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> {points}
<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {total_spent} ‚ÇΩ

"""
    
    if next_level:
        text += f"<b>–î–æ —É—Ä–æ–≤–Ω—è {next_level}:</b> {spent_needed} ‚ÇΩ\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–±—ç–∫–µ
    cashback_percent = LOYALTY_LEVELS.get(level, {}).get("cashback_percent", 0)
    text += f"\n<b>–í–∞—à –∫–µ—à–±—ç–∫:</b> {cashback_percent}% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"
    
    buttons = [
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="referral_link")],
        [InlineKeyboardButton("üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await update.message.reply_html(
        text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    await update.message.reply_html(
        """
<b>‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ</b>

<b>Tea Shop Bot</b> ‚Äî —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —ç–ª–∏—Ç–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ —á–∞—è —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞.

<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –ü—Ä—è–º—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —á–∞–π–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
‚Ä¢ –°—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

<b>–ò—Å—Ç–æ—Ä–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:</b>
–ù–∞—à –º–∞–≥–∞–∑–∏–Ω –æ—Å–Ω–æ–≤–∞–Ω –≤ 2020 –≥–æ–¥—É –≥—Ä—É–ø–ø–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ —á–∞–π–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã —Å —Ü–µ–ª—å—é —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–µ–¥–∫–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∞ —á–∞—è –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞.

–ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ —Å–ª–µ–¥–∏–º –∑–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ —á–∞–π–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ–µ.
""",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def show_loyalty_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    await update.message.reply_html(
        f"""
<b>üíØ –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ Tea Shop Bot</b>

–ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–µ 100 ‚ÇΩ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5 –±–∞–ª–ª–æ–≤
‚Ä¢ 1 –±–∞–ª–ª = 1 ‚ÇΩ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å –∏ –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π

<b>–£—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ <b>–ù–æ–≤–∏—á–æ–∫</b> (0-{LOYALTY_LEVELS['–õ—é–±–∏—Ç–µ–ª—å']['min_spent']-1} ‚ÇΩ): –∫–µ—à–±—ç–∫ {LOYALTY_LEVELS['–ù–æ–≤–∏—á–æ–∫']['cashback_percent']}%
‚Ä¢ <b>–õ—é–±–∏—Ç–µ–ª—å</b> ({LOYALTY_LEVELS['–õ—é–±–∏—Ç–µ–ª—å']['min_spent']}-{LOYALTY_LEVELS['–ó–Ω–∞—Ç–æ–∫']['min_spent']-1} ‚ÇΩ): –∫–µ—à–±—ç–∫ {LOYALTY_LEVELS['–õ—é–±–∏—Ç–µ–ª—å']['cashback_percent']}%
‚Ä¢ <b>–ó–Ω–∞—Ç–æ–∫</b> ({LOYALTY_LEVELS['–ó–Ω–∞—Ç–æ–∫']['min_spent']}-{LOYALTY_LEVELS['–ú–∞—Å—Ç–µ—Ä']['min_spent']-1} ‚ÇΩ): –∫–µ—à–±—ç–∫ {LOYALTY_LEVELS['–ó–Ω–∞—Ç–æ–∫']['cashback_percent']}%
‚Ä¢ <b>–ú–∞—Å—Ç–µ—Ä</b> (–æ—Ç {LOYALTY_LEVELS['–ú–∞—Å—Ç–µ—Ä']['min_spent']} ‚ÇΩ): –∫–µ—à–±—ç–∫ {LOYALTY_LEVELS['–ú–∞—Å—Ç–µ—Ä']['cashback_percent']}%

<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_BONUS_POINTS} –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {REFERRAL_BONUS_PERCENT}% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –≤ –≤–∏–¥–µ –±–∞–ª–ª–æ–≤
""",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    await update.message.reply_html(
        """
<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>

<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (800) 123-45-67
<b>Email:</b> support@teashopbot.com
<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 20:00, –°–±-–í—Å —Å 10:00 –¥–æ 18:00

<b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
‚Ä¢ Telegram: @teashopbot
‚Ä¢ Instagram: @teashop_official
‚Ä¢ VK: vk.com/teashop

<b>–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:</b>
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ß–∞–π–Ω–∞—è, –¥. 15, –æ—Ñ–∏—Å 42

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
""",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/teashopbot")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

# –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
async def show_admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    keyboard = [
        [KeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton("‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")],
        [KeyboardButton("üöö –ó–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ"), KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    new_orders = len([o for o in ORDERS.values() if o.get('status') == 'new'])
    processing_orders = len([o for o in ORDERS.values() if o.get('status') == 'processing'])
    shipped_orders = len([o for o in ORDERS.values() if o.get('status') == 'shipped'])
    delivered_orders = len([o for o in ORDERS.values() if o.get('status') == 'delivered'])
    canceled_orders = len([o for o in ORDERS.values() if o.get('status') == 'canceled'])
    
    await update.message.reply_html(
        f"""
<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{new_orders}</b>
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{processing_orders}</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{shipped_orders}</b>
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{delivered_orders}</b>
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: <b>{canceled_orders}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:
""",
        reply_markup=reply_markup
    )

async def show_admin_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    total_products = sum(len(products) for products in TEA_PRODUCTS.values())
    
    await update.message.reply_html(
        f"""
<b>üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{total_products}</b>
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <b>{len(TEA_CATEGORIES)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
        reply_markup=reply_markup
    )

async def show_admin_loyalty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å—é
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"), KeyboardButton("üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    total_users = len(LOYALTY)
    total_points = sum(user_data.get('points', 0) for user_data in LOYALTY.values())
    
    await update.message.reply_html(
        f"""
<b>üíØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: <b>{total_users}</b>
‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: <b>{total_points}</b>
‚Ä¢ –ö–µ—à–±—ç–∫: –æ—Ç <b>{LOYALTY_LEVELS['–ù–æ–≤–∏—á–æ–∫']['cashback_percent']}%</b> –¥–æ <b>{LOYALTY_LEVELS['–ú–∞—Å—Ç–µ—Ä']['cashback_percent']}%</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: <b>{REFERRAL_BONUS_POINTS}</b> –±–∞–ª–ª–æ–≤
‚Ä¢ –ö—ç—à–±—ç–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{REFERRAL_BONUS_PERCENT}%</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
        reply_markup=reply_markup
    )

async def show_admin_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    keyboard = [
        [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    active_promos = sum(1 for promo in PROMO_CODES.values() if promo['uses_left'] > 0)
    
    await update.message.reply_html(
        f"""
<b>üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{len(PROMO_CODES)}</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{active_promos}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
        reply_markup=reply_markup
    )

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = [
        [KeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü"), KeyboardButton("üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_orders = len(ORDERS)
    total_revenue = sum(order.get('total', 0) for order in ORDERS.values())
    avg_order = total_revenue / total_orders if total_orders > 0 else 0
    
    await update.message.reply_html(
        f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>

–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_order:.2f} ‚ÇΩ</b>
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(LOYALTY)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
""",
        reply_markup=reply_markup
    )

async def update_admin_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏"""
    await update.message.reply_html(
        """
<b>üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>

–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ:
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ö
‚Ä¢ –¢–æ–≤–∞—Ä–∞—Ö
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
""",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
        ], resize_keyboard=True)
    )

async def show_orders_by_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filtered_orders = {order_id: order for order_id, order in ORDERS.items() if order.get('status') == status}
    
    if not filtered_orders:
        await update.message.reply_html(
            f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")]
            ], resize_keyboard=True)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    text = f"<b>–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':</b>\n\n"
    
    for order_id, order in filtered_orders.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        date = order.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        user_id = order.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        total = order.get('total', 0)
        
        text += f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
        text += f"–î–∞—Ç–∞: {date}\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        text += f"–°—É–º–º–∞: {total} ‚ÇΩ\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–æ–≤
    buttons = []
    for order_id in filtered_orders.keys():
        buttons.append([InlineKeyboardButton(f"–ó–∞–∫–∞–∑ #{order_id}", callback_data=f"admin_order_{order_id}")])
    
    await update.message.reply_html(
        text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def admin_add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.effective_user.id
    USER_STATES[user_id] = ADMIN_STATE_AWAITING_PRODUCT_DATA
    
    await update.message.reply_html(
        """
<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>

–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è;–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;—Ü–µ–Ω–∞</code>

–ù–∞–ø—Ä–∏–º–µ—Ä:
<code>black;–ö–µ–Ω–∏–π—Å–∫–∏–π —á–∞–π;–ö—Ä–µ–ø–∫–∏–π —á–µ—Ä–Ω—ã–π —á–∞–π –∏–∑ –ö–µ–Ω–∏–∏;500</code>

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
‚Ä¢ black - –ß–µ—Ä–Ω—ã–π —á–∞–π
‚Ä¢ green - –ó–µ–ª–µ–Ω—ã–π —á–∞–π
‚Ä¢ oolong - –£–ª—É–Ω
‚Ä¢ herbal - –¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π
‚Ä¢ mate - –ú–∞—Ç–µ
‚Ä¢ white - –ë–µ–ª—ã–π —á–∞–π
""",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
    )

async def admin_show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for key, name in TEA_CATEGORIES.items():
        buttons.append([InlineKeyboardButton(name, callback_data=f"admin_category_{key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    buttons.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_create_category")])
    
    await update.message.reply_html(
        """
<b>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:
""",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def admin_view_order_callback(query, order_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º"""
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    order = ORDERS.get(order_id)
    
    if not order:
        await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    status = order.get('status', 'new')
    date = order.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    user_id = order.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    total = order.get('total', 0)
    address = order.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    items = order.get('items', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    text = f"""
<b>üì¶ –ó–∞–∫–∞–∑ #{order_id}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status.upper()}
<b>–î–∞—Ç–∞:</b> {date}
<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}
<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}

<b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item_id, item_data in items.items():
        name = item_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        quantity = item_data.get('quantity', 0)
        price = item_data.get('price', 0)
        text += f"‚Ä¢ {name} x {quantity} = {price * quantity} ‚ÇΩ\n"
    
    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    buttons = []
    
    if status == 'new':
        buttons.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_confirm_{order_id}")])
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_cancel_{order_id}")])
    elif status == 'processing':
        buttons.append([InlineKeyboardButton("üöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_ship_{order_id}")])
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_cancel_{order_id}")])
    elif status == 'shipped':
        buttons.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"admin_deliver_{order_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    if status in ['new', 'processing', 'shipped']:
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"admin_orders_{status}")])
    else:
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"admin_orders")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def admin_update_order_status(query, order_id, new_status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    if order_id not in ORDERS:
        await query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    old_status = ORDERS[order_id].get('status', 'new')
    ORDERS[order_id]['status'] = new_status
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user_id = ORDERS[order_id].get('user_id')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    status_messages = {
        'processing': "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        'shipped': "üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É",
        'delivered': "‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É",
        'canceled': "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"
    }
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    await query.answer(status_messages.get(new_status, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
    await admin_view_order_callback(query, order_id)
    
    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é context.bot.send_message(user_id, —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è)
    # –ù–æ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ context –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
async def show_orders_by_status_callback(query, status):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ callback"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filtered_orders = {order_id: order for order_id, order in ORDERS.items() if order.get('status') == status}
    
    if not filtered_orders:
        await query.edit_message_text(
            f"–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")]
            ])
        )
        await query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    text = f"<b>–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':</b>\n\n"
    
    for order_id, order in filtered_orders.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        date = order.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        user_id = order.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        total = order.get('total', 0)
        
        text += f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
        text += f"–î–∞—Ç–∞: {date}\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        text += f"–°—É–º–º–∞: {total} ‚ÇΩ\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–æ–≤
    buttons = []
    for order_id in filtered_orders.keys():
        buttons.append([InlineKeyboardButton(f"–ó–∞–∫–∞–∑ #{order_id}", callback_data=f"admin_order_{order_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_orders")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def show_sales_period_stats_callback(query, period):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    now = datetime.now()
    start_date = None
    
    if period == "today":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "week":
        start_date = now - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        start_date = now - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:  # all time
        start_date = None
        period_name = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ
    filtered_orders = {}
    if start_date:
        filtered_orders = {
            order_id: order for order_id, order in ORDERS.items() 
            if datetime.fromisoformat(order.get('date', '2020-01-01')) >= start_date
        }
    else:
        filtered_orders = ORDERS
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_orders = len(filtered_orders)
    total_revenue = sum(order.get('total', 0) for order in filtered_orders.values())
    avg_order = total_revenue / total_orders if total_orders > 0 else 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {}
    for order in filtered_orders.values():
        status = order.get('status', 'new')
        status_counts[status] = status_counts.get(status, 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_order:.2f} ‚ÇΩ</b>

<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
‚Ä¢ –ù–æ–≤—ã—Ö: <b>{status_counts.get('new', 0)}</b>
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{status_counts.get('processing', 0)}</b>
‚Ä¢ –í –¥–æ—Å—Ç–∞–≤–∫–µ: <b>{status_counts.get('shipped', 0)}</b>
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{status_counts.get('delivered', 0)}</b>
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: <b>{status_counts.get('canceled', 0)}</b>
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    buttons = [
        [
            InlineKeyboardButton("üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_stats_today"),
            InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_stats_week")
        ],
        [
            InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="admin_stats_month"),
            InlineKeyboardButton("üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="admin_stats_all")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main")]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def admin_create_category(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await query.edit_message_text(
        """
<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ:
1. –í—ã–π—Ç–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è_id;–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</code>

–ù–∞–ø—Ä–∏–º–µ—Ä:
<code>puerh;–ü—É—ç—Ä</code>

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.
""",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_categories")]
        ]),
        parse_mode='HTML'
    )
    await query.answer()

async def admin_select_product_category(query, category_key):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = TEA_CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = TEA_PRODUCTS.get(category_key, [])
    
    if not products:
        await query.edit_message_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"admin_add_product_to_{category_key}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_categories")]
            ]),
            parse_mode='HTML'
        )
        await query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    text = f"<b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':</b>\n\n"
    
    for product in products:
        product_id = product.get('id', '')
        name = product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        price = product.get('price', 0)
        
        text += f"‚Ä¢ <b>{name}</b> - {price} ‚ÇΩ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    buttons = []
    for product in products:
        product_id = product.get('id', '')
        name = product.get('name', '')
        buttons.append([InlineKeyboardButton(f"‚úèÔ∏è {name}", callback_data=f"admin_edit_product_{product_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"admin_add_product_to_{category_key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_categories")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
    await query.answer()

async def admin_add_product_callback(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ callback"""
    await query.edit_message_text(
        """
<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤–∞–º –Ω—É–∂–Ω–æ:
1. –í—ã–π—Ç–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è;–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;—Ü–µ–Ω–∞</code>

–ù–∞–ø—Ä–∏–º–µ—Ä:
<code>black;–ö–µ–Ω–∏–π—Å–∫–∏–π —á–∞–π;–ö—Ä–µ–ø–∫–∏–π —á–µ—Ä–Ω—ã–π —á–∞–π –∏–∑ –ö–µ–Ω–∏–∏;500</code>

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
‚Ä¢ black - –ß–µ—Ä–Ω—ã–π —á–∞–π
‚Ä¢ green - –ó–µ–ª–µ–Ω—ã–π —á–∞–π
‚Ä¢ oolong - –£–ª—É–Ω
‚Ä¢ herbal - –¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π
‚Ä¢ mate - –ú–∞—Ç–µ
‚Ä¢ white - –ë–µ–ª—ã–π —á–∞–π
""",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_products")]
        ]),
        parse_mode='HTML'
    )
    await query.answer()

async def process_new_product_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
    if text == "üîô –ù–∞–∑–∞–¥":
        USER_STATES[user_id] = ADMIN_STATE_PRODUCTS
        await show_admin_products(update, context)
        return
    
    parts = text.strip().split(';')
    if len(parts) != 4:
        await update.message.reply_html(
            """
‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–∫–∞—Ç–µ–≥–æ—Ä–∏—è;–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;—Ü–µ–Ω–∞</code>

–ù–∞–ø—Ä–∏–º–µ—Ä:
<code>black;–ö–µ–Ω–∏–π—Å–∫–∏–π —á–∞–π;–ö—Ä–µ–ø–∫–∏–π —á–µ—Ä–Ω—ã–π —á–∞–π –∏–∑ –ö–µ–Ω–∏–∏;500</code>
""",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return
    
    category, name, description, price_str = parts
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category not in TEA_CATEGORIES:
        await update.message.reply_html(
            f"""
‚ùå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>

–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
‚Ä¢ black - –ß–µ—Ä–Ω—ã–π —á–∞–π
‚Ä¢ green - –ó–µ–ª–µ–Ω—ã–π —á–∞–π
‚Ä¢ oolong - –£–ª—É–Ω
‚Ä¢ herbal - –¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π
‚Ä¢ mate - –ú–∞—Ç–µ
‚Ä¢ white - –ë–µ–ª—ã–π —á–∞–π
""",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
    try:
        price = int(price_str)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await update.message.reply_html(
            """
‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞</b>

–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
""",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    product_id = f"{category[0]}{len(TEA_PRODUCTS[category]) + 1}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    new_product = {
        "id": product_id,
        "name": name,
        "description": description,
        "price": price
    }
    
    TEA_PRODUCTS[category].append(new_product)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
    await update.message.reply_html(
        f"""
‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>

ID: {product_id}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {TEA_CATEGORIES[category]}
–ù–∞–∑–≤–∞–Ω–∏–µ: {name}
–¶–µ–Ω–∞: {price} ‚ÇΩ
""",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä")], 
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤")]
        ], resize_keyboard=True)
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
    USER_STATES[user_id] = ADMIN_STATE_PRODUCTS